
<!-- saved from url=(0076)http://gist-slide.appspot.com/3923590/Deprecating_the_Observer_Pattern.md#75 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
        <meta http-equiv="Expires" content="0">
        <title></title>
        <link type="text/css" rel="stylesheet" href="./Deprecating_the_Observer_Pattern.md_files/show.css">
        <link type="text/css" rel="stylesheet" href="./Deprecating_the_Observer_Pattern.md_files/prettify.css">
        <script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/jquery.min.js"></script>
        <script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/show.js"></script>
        <script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/prettify.js"></script>
        <script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-apollo.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-css.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-hs.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-lisp.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-lua.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-ml.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-proto.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-scala.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-sql.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-sql.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-vb.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-vhdl.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-wiki.js"></script><script type="text/javascript" src="./Deprecating_the_Observer_Pattern.md_files/lang-yaml.js"></script>
      <script type="text/javascript"><!--
        window.onload=function() { prettyPrint(); };
      --></script>
      </head>
      <body>
        <div id="slides" style="height: 781px; width: 1438px; ">
          <div id="reel" style="margin-left: -106404.30170292249px; ">
            <div class="content" id="slide-0" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="Deprecating+the+Observer+Pattern">Deprecating the Observer Pattern</h1><p>　
</p><p>2012/10/21
ScalaBase in 名古屋
</p></div>
      </div><div class="content" id="slide-1" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h1><p>　
</p><ul><li><a href="https://twitter.com/gakuzzzz">@gakuzzzz</a>
</li><li>中村学(なかむら まなぶ)
</li><li>株式会社Tech to Value
</li><li>ScalaでWebシステム開発してるよ
</li></ul></div>
      </div><div class="content" id="slide-2" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E5%85%83%E8%AB%96%E6%96%87">元論文</h1><p>　
</p><ul><li><a href="http://lamp.epfl.ch/~imaier/pub/DeprecatingObserversTR2010.pdf">Deprecating the Observer Pattern</a>
</li><li>EPFL-REPORT-148043
</li><li><p>Authors
</p><ul><li>Ingo Maier 
</li><li>Tiark Rompf 
</li><li>Martin Odersky
</li></ul></li></ul></div>
      </div><div class="content" id="slide-3" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="Abstract">Abstract</h1><p>　
</p><p><strong>Observer Pattern はイケてないから俺がもっとかっこいいAPIを提案してやんよ！</strong>
</p></div>
      </div><div class="content" id="slide-4" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E8%83%8C%E6%99%AF">背景</h1><p>　
</p><ul><li>昨今インタラクティブなアプリケーションが非常に増大している
</li><li>インタラクティブなアプリケーションは継続的にインタラクションをハンドリングする必要がある
</li><li>しかしそのプログラミングモデルは進化していない
</li></ul></div>
      </div><div class="content" id="slide-5" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="2008+Adobe+%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3%E3%82%88%E3%82%8A">2008 Adobe プレゼンより</h1><p>　
</p><ul><li>Adobeのデスクトップアプリケーションの1/3がイベントハンドリングコード
</li><li>報告されたバグの1/2がイベントハンドリングコード内
</li></ul></div>
      </div><div class="content" id="slide-6" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E6%94%B9%E5%96%84%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%EF%BC%81">改善できるよ！</h1></div>
      </div><div class="content" id="slide-7" style="height: 781px; width: 1438px; ">
       <div class="container"><p>Observerパターンの例(マウスドラッグ)
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">var</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Path</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">null</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> moveObserver </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">(</span><span class="pln">event</span><span class="pun">:</span><span class="pln"> </span><span class="typ">MouseEvent</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; path</span><span class="pun">.</span><span class="pln">lineTo</span><span class="pun">(</span><span class="pln">event</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br>control</span><span class="pun">.</span><span class="pln">addMouseDownObserver </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; path </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">(</span><span class="pln">event</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; control</span><span class="pun">.</span><span class="pln">addMouseMoveObserver</span><span class="pun">(</span><span class="pln">moveObserver</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br>control</span><span class="pun">.</span><span class="pln">addMouseUpObserver </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; control</span><span class="pun">.</span><span class="pln">removeMouseMoveObserver</span><span class="pun">(</span><span class="pln">moveObserver</span><span class="pun">)</span><span class="pln"><br>&nbsp; path</span><span class="pun">.</span><span class="pln">close</span><span class="pun">()</span><span class="pln"><br>&nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-8" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%84%E3%81%91%E3%81%A6%E3%81%AA%E3%81%84">いけてない</h1><ul><li><p>副作用
</p><ul><li>var !!!
</li></ul></li><li><p>カプセル化の破壊
</p><ul><li>path がスコープの外に漏れてる
</li></ul></li><li><p>Composabilityが無い
</p><ul><li>それぞれのObserverが独立しているので、同時にObserverを破棄したりできない
</li></ul></li><li><p>レイヤリングが不適切
</p><ul><li>パスの追跡だけじゃなく描画まで行われている
</li></ul></li><li>拡張性が無い
</li></ul></div>
      </div><div class="content" id="slide-9" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%84%E3%81%91%E3%81%A6%E3%81%AA%E3%81%842">いけてない2</h1><ul><li><p>統一性に欠ける
</p><ul><li>多彩なObserverが混在する
</li></ul></li><li><p>抽象度が低い
</p><ul><li>Escキーでもドラッグ停止したいよねー
</li></ul></li><li><p>リソース管理の必要性
</p><ul><li>ドラッグ中のみマウスイベントを監視したい。そのためにObserverの追加削除を管理する必要がある
</li></ul></li><li><p>意味的な距離がある
</p><ul><li>やりたい事とコードの表現に乖離がある
</li></ul></li></ul></div>
      </div><div class="content" id="slide-10" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%98%E3%82%83%E3%81%82%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B%E3%81%AE%EF%BC%9F">じゃあどうするの？</h1></div>
      </div><div class="content" id="slide-11" style="height: 781px; width: 1438px; ">
       <div class="container"><p>まずは統合的なイベントのインターフェイスを考える
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> emit</span><span class="pun">(</span><span class="pln">event</span><span class="pun">:</span><span class="pln"> A</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> es </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Int</span><span class="pun">]</span><span class="pln"><br>es emit </span><span class="lit">1</span><span class="pln"><br>es emit </span><span class="lit">2</span></code></pre></div>
      </div><div class="content" id="slide-12" style="height: 781px; width: 1438px; ">
       <div class="container"><p>ソースからのイベントに反応するクロージャを登録する observe メソッドを用意するよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Observing</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> observe</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">es</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">])<br>    (</span><span class="pln">f</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> Unit</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Objserver</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">...</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> ob </span><span class="pun">=</span><span class="pln"> observe</span><span class="pun">(</span><span class="pln">es</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; println</span><span class="pun">(</span><span class="str">"Receiving "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> x</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="pun">...</span><span class="pln"><br>ob</span><span class="pun">.</span><span class="pln">dispose</span><span class="pun">()</span></code></pre><p>　
</p><p>Observerを破棄するためにイベントソースを覚えておく必要がない!
</p></div>
      </div><div class="content" id="slide-13" style="height: 781px; width: 1438px; ">
       <div class="container"><p>ボタンの例
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Button</span><span class="pun">(</span><span class="pln">label</span><span class="pun">:</span><span class="pln"> </span><span class="typ">String</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> clicks </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Int</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="com">// call "this emit x" for each system event</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><p>これによって終了ボタンがこんな風に書ける
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">object</span><span class="pln"> </span><span class="typ">Application</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Observing</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="pun">...</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> quitButton </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Button</span><span class="pun">(</span><span class="str">"quit"</span><span class="pun">)</span><span class="pln"><br>&nbsp; observe</span><span class="pun">(</span><span class="pln">quitButton</span><span class="pun">.</span><span class="pln">clicks</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">exit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-14" style="height: 781px; width: 1438px; ">
       <div class="container"><p>普通は終了ボタンだけじゃなく、メニューからや例外時にも終了したいよね
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> quitButton </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Button</span><span class="pun">(</span><span class="str">"quit"</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> quitMenu </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MenuItem</span><span class="pun">(</span><span class="str">"quit"</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> fatalExceptions </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Exception</span><span class="pun">]</span><span class="pln"><br>observe</span><span class="pun">(</span><span class="pln">quitButton</span><span class="pun">.</span><span class="pln">clicks</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">exit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>observe</span><span class="pun">(</span><span class="pln">quitMenu</span><span class="pun">.</span><span class="pln">clicks</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">exit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>observe</span><span class="pun">(</span><span class="pln">fatalExceptions</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">exit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span></code></pre><p>　
</p><p>あじゃぱー
</p></div>
      </div><div class="content" id="slide-15" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%9D%E3%81%93%E3%81%A7+merge+%E3%81%A7%E3%81%99%E3%82%88">そこで merge ですよ</h1><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> merge</span><span class="pun">[</span><span class="pln">B</span><span class="pun">&gt;:</span><span class="pln">A</span><span class="pun">](</span><span class="pln">that</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]):</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><p>もし同時にイベントが発行された場合に問題になるけど、それは後で議論するよ。
</p></div>
      </div><div class="content" id="slide-16" style="height: 781px; width: 1438px; ">
       <div class="container"><p>これで重複はなくなった
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">UIApplication</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Observing</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="pun">...</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> quit</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Any</span><span class="pun">]</span><span class="pln"><br>&nbsp; observe</span><span class="pun">(</span><span class="pln">quit</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">...</span><span class="pln"> </span><span class="com">// clean up, display dialog, etc</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">exit</span><span class="pun">()</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">object</span><span class="pln"> </span><span class="typ">MyApp</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">UIApplication</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="pun">...</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> quit </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">quitButton</span><span class="pun">.</span><span class="pln">clicks<br>&nbsp; &nbsp; merge quitMenu</span><span class="pun">.</span><span class="pln">clicks<br>&nbsp; &nbsp; merge fatalExceptions</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-17" style="height: 781px; width: 1438px; ">
       <div class="container"><p>でも型が
</p><p><code>EventSource[Int]</code> と <code>EventSource[String]</code> と <code>EventSource[Exception]</code> を <code>merge</code> すると <code>EventSource[Any]</code> になっちゃう。
</p><p>これはあんまりうれしくない。
</p></div>
      </div><div class="content" id="slide-18" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%9D%E3%81%93%E3%81%A7+Functor+%E3%81%A7%E3%81%99%E3%82%88">そこで Functor ですよ</h1><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> map</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="pln">f</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> B</span><span class="pun">):</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]</span></code></pre><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> quit </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="pun">(</span><span class="pln">quitButton</span><span class="pun">.</span><span class="pln">clicks</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"Ok"</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; merge quitMenu</span><span class="pun">.</span><span class="pln">clicks</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"Ok"</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; merge fatalExceptions</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="pln">getMessage</span><span class="pun">))</span></code></pre><p>　
</p><p>わーいやったー
</p></div>
      </div><div class="content" id="slide-19" style="height: 781px; width: 1438px; ">
       <div class="container"><p>ついでだから他のコンビネータも定義しとくよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> collect</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="pln">p</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PartialFunction</span><span class="pun">[</span><span class="pln">A</span><span class="pun">,</span><span class="pln"> B</span><span class="pun">]):</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> map</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="pln">f</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> B</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; collect </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">case</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> f</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> filter</span><span class="pun">(</span><span class="pln">p</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Boolean</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; collect </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">case</span><span class="pln"> x </span><span class="kwd">if</span><span class="pln"> p</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> x </span><span class="pun">}</span></code></pre><p>　
</p><p>collect があれば map も filter も定義できるね。
</p></div>
      </div><div class="content" id="slide-20" style="height: 781px; width: 1438px; ">
       <div class="container"><p>新しいイベントAPIを使うと最初のマウスドラッグの例はこうなるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">var</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Path</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">null</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> moveObserver </span><span class="pun">=</span><span class="pln"> </span><span class="lit">null</span><span class="pln"><br>observe</span><span class="pun">(</span><span class="pln">control</span><span class="pun">.</span><span class="pln">mouseDown</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; path </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">(</span><span class="pln">event</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; moveObserver </span><span class="pun">=</span><span class="pln"><br>&nbsp; &nbsp; observe</span><span class="pun">(</span><span class="pln">control</span><span class="pun">.</span><span class="pln">mouseMoves</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; path</span><span class="pun">.</span><span class="pln">lineTo</span><span class="pun">(</span><span class="pln">event</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br>observe</span><span class="pun">(</span><span class="pln">control</span><span class="pun">.</span><span class="pln">mouseUp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; moveObserver</span><span class="pun">.</span><span class="pln">dispose</span><span class="pun">()</span><span class="pln"><br>&nbsp; path</span><span class="pun">.</span><span class="pln">close</span><span class="pun">()</span><span class="pln"><br>&nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-21" style="height: 781px; width: 1438px; ">
       <div class="container"><p>すでに統一的なObserverとイベントのインターフェイスがあるので、ドラッグオペレーションに含まれるイベントを抽象化することが可能だよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> installDragController</span><span class="pun">(</span><span class="pln">start</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Positional</span><span class="pun">],</span><span class="pln"><br>&nbsp; &nbsp; move</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Positional</span><span class="pun">],</span><span class="pln"> end</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="typ">Positional</span><span class="pun">])</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">var</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Path</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">null</span><span class="pln"><br>&nbsp; </span><span class="kwd">var</span><span class="pln"> moveObserver </span><span class="pun">=</span><span class="pln"> </span><span class="lit">null</span><span class="pln"><br>&nbsp; observe</span><span class="pun">(</span><span class="pln">start</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; path </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">(</span><span class="pln">event</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; moveObserver </span><span class="pun">=</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; observe</span><span class="pun">(</span><span class="pln">move</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; path</span><span class="pun">.</span><span class="pln">lineTo</span><span class="pun">(</span><span class="pln">event</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; observe</span><span class="pun">(</span><span class="pln">end</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> event </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; moveObserver</span><span class="pun">.</span><span class="pln">dispose</span><span class="pun">()</span><span class="pln"><br>&nbsp; &nbsp; path</span><span class="pun">.</span><span class="pln">close</span><span class="pun">()</span><span class="pln"><br>&nbsp; &nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-22" style="height: 781px; width: 1438px; ">
       <div class="container"><p>やったー これでマウス以外のポイントデバイスや、キー操作でのドラッグ停止なんかができるようになったよー
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> installDragController</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; pen</span><span class="pun">.</span><span class="pln">down</span><span class="pun">,</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; pen</span><span class="pun">.</span><span class="pln">moves</span><span class="pun">,</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; pen</span><span class="pun">.</span><span class="pln">up merge escapeKeyDown</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> pen</span><span class="pun">.</span><span class="pln">position</span><span class="pun">.</span><span class="pln">now</span><span class="pun">))</span></code></pre></div>
      </div><div class="content" id="slide-23" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0">でもまだ</h1><p>副作用とかいっぱいあるし、イマイチだよね
</p></div>
      </div><div class="content" id="slide-24" style="height: 781px; width: 1438px; ">
       <div class="container"><p>セマンティクスを直接コード化したいんだよ
</p><p>　
</p><ol><li>マウスボタンが押されたら、新しいパスをスタートする
</li><li>マウスが離されるまで、マウスの動きをPathに記録する
</li><li>マウスボタンが解放されたら、パスをクローズする
</li></ol></div>
      </div><div class="content" id="slide-25" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%93%E3%82%8C%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB">これを実現するために</h1><p>Reactor というものを導入するよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="typ">Reactor</span><span class="pun">.</span><span class="pln">once </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; </span><span class="com">// step 1:</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> path </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">((</span><span class="pln">self next mouseDown</span><span class="pun">).</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="com">// step 2:</span><span class="pln"><br>&nbsp; self loopUntil mouseUp </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">val</span><span class="pln"> m </span><span class="pun">=</span><span class="pln"> self next mouseMove<br>&nbsp; &nbsp; path</span><span class="pun">.</span><span class="pln">lineTo</span><span class="pun">(</span><span class="pln">m</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; </span><span class="com">// step 3:</span><span class="pln"><br>&nbsp; path</span><span class="pun">.</span><span class="pln">close</span><span class="pun">()</span><span class="pln"><br>&nbsp; draw</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-26" style="height: 781px; width: 1438px; ">
       <div class="container"><p>Reactor はこんなメソッド持ってるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="com">/** body を一回評価する */</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> once</span><span class="pun">(</span><span class="pln">body</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Reactor</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Reactor</span><span class="pln"><br></span><span class="com">/** body を評価し続ける */</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> loop</span><span class="pun">(</span><span class="pln">body</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Reactor</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Reactor</span><span class="pln"><br><br></span><span class="com">/** e がイベントを発行するまでbodyをループする */</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> loopUntil</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">e</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">])(</span><span class="pln">body</span><span class="pun">:</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">):</span><span class="pln"> A <br><br></span><span class="com">/** e がイベントを発行するまでサスペンドする */</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> next</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">e</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]):</span><span class="pln"> A</span></code></pre></div>
      </div><div class="content" id="slide-27" style="height: 781px; width: 1438px; ">
       <div class="container"><p>今度は時間変化する値を考えてみる
</p><p>たとえば時間的に変化するラベルを持つボタン
</p></div>
      </div><div class="content" id="slide-28" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="Signal">Signal</h1><p>そこで Signal というインターフェイスを用意してみるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[+</span><span class="pln">A</span><span class="pun">]</span><span class="pln"><br><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Var</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">init</span><span class="pun">:</span><span class="pln"> A</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> update</span><span class="pun">(</span><span class="pln">newValue</span><span class="pun">:</span><span class="pln"> A</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">...</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Button</span><span class="pun">(</span><span class="pln">label</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="typ">String</span><span class="pun">])</span></code></pre></div>
      </div><div class="content" id="slide-29" style="height: 781px; width: 1438px; ">
       <div class="container"><p>使い方はこんな感じ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Var</span><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Var</span><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">{</span><span class="pln"> a</span><span class="pun">()+</span><span class="pln">b</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>observe</span><span class="pun">(</span><span class="pln">sum</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> println</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>a</span><span class="pun">()=</span><span class="pln"> </span><span class="lit">7</span><span class="pln"><br>b</span><span class="pun">()=</span><span class="pln"> </span><span class="lit">35</span></code></pre><p>　
</p><p>この例は9と42が表示されるよ
</p></div>
      </div><div class="content" id="slide-30" style="height: 781px; width: 1438px; ">
       <div class="container"><p>Signalのコンテキストを無視して現在の値を取得する now メソッドを用意しておくよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> b0 </span><span class="pun">=</span><span class="pln"> b</span><span class="pun">.</span><span class="pln">now<br></span><span class="kwd">val</span><span class="pln"> sum1 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">{</span><span class="pln"> a</span><span class="pun">()+</span><span class="pln">b0 </span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> sum2 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">{</span><span class="pln"> a</span><span class="pun">()+</span><span class="pln">b</span><span class="pun">.</span><span class="pln">now </span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> sum3 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">{</span><span class="pln"> a</span><span class="pun">()+</span><span class="pln">b</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span></code></pre><p>　
</p><ul><li>これらは3つ全部違うよ
</li><li>sum1 は sum2 と異なる b0 はつねに同じ値
</li><li>sum2 は a が update されるたびに b の現在の値を取得する
</li><li>sum3 は b にも依存して、b が update されるとsum3も発火する
</li></ul></div>
      </div><div class="content" id="slide-31" style="height: 781px; width: 1438px; ">
       <div class="container"><p>最終的に Signal はこんな感じ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[+</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> apply</span><span class="pun">():</span><span class="pln"> A<br>&nbsp; </span><span class="kwd">def</span><span class="pln"> now</span><span class="pun">:</span><span class="pln"> A<br>&nbsp; </span><span class="kwd">def</span><span class="pln"> changes</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><p>apply メソッドは Signal式上での関数呼び出し構文 <code>Signal { e() }</code> で使うんだ
</p></div>
      </div><div class="content" id="slide-32" style="height: 781px; width: 1438px; ">
       <div class="container"><p>またまたドラッグに戻るよ
</p><p>　
</p><p>ドラッグを改善するステップとして、Pathの構築と描画を分離するよ
</p></div>
      </div><div class="content" id="slide-33" style="height: 781px; width: 1438px; ">
       <div class="container"><p>こんな感じ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="typ">Path</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br></span><span class="typ">Val</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">)</span><span class="pln"> once </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; </span><span class="kwd">import</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">_<br>&nbsp; </span><span class="kwd">val</span><span class="pln"> down </span><span class="pun">=</span><span class="pln"> next</span><span class="pun">(</span><span class="pln">mouseDown</span><span class="pun">)</span><span class="pln"><br>&nbsp; emit</span><span class="pun">(</span><span class="pln">previous</span><span class="pun">.</span><span class="pln">moveTo</span><span class="pun">(</span><span class="pln">down</span><span class="pun">.</span><span class="pln">position</span><span class="pun">))</span><span class="pln"><br>&nbsp; loopUntil</span><span class="pun">(</span><span class="pln">mouseUp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">val</span><span class="pln"> m </span><span class="pun">=</span><span class="pln"> next</span><span class="pun">(</span><span class="pln">mouseMove</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; emit</span><span class="pun">(</span><span class="pln">previous</span><span class="pun">.</span><span class="pln">lineTo</span><span class="pun">(</span><span class="pln">m</span><span class="pun">.</span><span class="pln">position</span><span class="pun">))</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; emit</span><span class="pun">(</span><span class="pln">previous</span><span class="pun">.</span><span class="pln">close</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-34" style="height: 781px; width: 1438px; ">
       <div class="container"><p>メソッド once と loopUntil は Reactor で出てきたけど、Signal に同様のものを導入するんだ。
</p><p>　
</p><p>また Path を immutable 版になってる。lineTo と close は元の Path を変更することなく、新しい Path を生成するよ。
</p><p>　
</p><p>そして描画は emit メソッドに置き換えられるんだ。
</p></div>
      </div><div class="content" id="slide-35" style="height: 781px; width: 1438px; ">
       <div class="container"><p>これで外部Observerで描画を実現できるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="pln">observe</span><span class="pun">(</span><span class="pln">path</span><span class="pun">)(</span><span class="pln">draw</span><span class="pun">)</span></code></pre><p>　
</p><p>わぉ！シンプル！
</p></div>
      </div><div class="content" id="slide-36" style="height: 781px; width: 1438px; ">
       <div class="container"><p>これで EventSource と Signal という二つの道具を手に入れたけど、ここでさらに共通の機能を抽出しよう。
</p></div>
      </div><div class="content" id="slide-37" style="height: 781px; width: 1438px; ">
       <div class="container"><p>その前に EventSource についても mutable な性質を分離する Events trait を用意しておくよ。
</p><p>　
</p><p>今までの EventSource を引数に取ったり戻り値に返すメソッドは Events に書き換わると思って頂戴。
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[+</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> subscribe</span><span class="pun">(</span><span class="pln">ob</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observer</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> message</span><span class="pun">(</span><span class="pln">ob</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observer</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Option</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">EventSource</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> emit</span><span class="pun">(</span><span class="pln">ev</span><span class="pun">:</span><span class="pln"> A</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"><br>&nbsp; </span><span class="pun">...</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-38" style="height: 781px; width: 1438px; ">
       <div class="container"><p>Events と Signal の親はこうなるんだ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[+</span><span class="typ">Msg</span><span class="pun">,</span><span class="pln"> </span><span class="pun">+</span><span class="typ">Now</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> current</span><span class="pun">(</span><span class="pln">dep</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Dependant</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Now</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> message</span><span class="pun">(</span><span class="pln">dep</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Dependant</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Option</span><span class="pun">[</span><span class="typ">Msg</span><span class="pun">]</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> now</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Now</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> current</span><span class="pun">(</span><span class="typ">Dependent</span><span class="pun">.</span><span class="typ">Nil</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> msg</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Msg</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> message</span><span class="pun">(</span><span class="typ">Dependent</span><span class="pun">.</span><span class="typ">Nil</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[+</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">A</span><span class="pun">,</span><span class="pln"> A</span><span class="pun">]</span><span class="pln"><br></span><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[+</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">A</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">]</span></code></pre><p>　
</p></div>
      </div><div class="content" id="slide-39" style="height: 781px; width: 1438px; ">
       <div class="container"><p>(Dependentってナニモノ？)
</p><p>　
</p><p>(このReactiveが依存するReactiveを抽象化して、依存のないReactiveを表せるようにNilを定義したものっぽい)
</p></div>
      </div><div class="content" id="slide-40" style="height: 781px; width: 1438px; ">
       <div class="container"><p>once や loop のために中間クラスを導入するよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">implicit</span><span class="pln"> </span><span class="kwd">def</span><span class="pln"> eventsToDataflow</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">e</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">A</span><span class="pun">])</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">EventsToDataflow</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">implicit</span><span class="pln"> </span><span class="kwd">def</span><span class="pln"> signalToDataflow</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">s</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">])</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SignalToDataflow</span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span></code></pre></div>
      </div><div class="content" id="slide-41" style="height: 781px; width: 1438px; ">
       <div class="container"><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">ReactiveToDataflow</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln"> N</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; R &nbsp;</span><span class="pun">&lt;:</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln">N</span><span class="pun">],</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; DR </span><span class="pun">&lt;:</span><span class="pln"> </span><span class="typ">DataflowReactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln">N</span><span class="pun">,</span><span class="pln">R</span><span class="pun">]]</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln"> N</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">def</span><span class="pln"> init</span><span class="pun">:</span><span class="pln"> R<br><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> loop</span><span class="pun">(</span><span class="pln">body</span><span class="pun">:</span><span class="pln"> DR </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">):</span><span class="pln"> R<br>&nbsp; </span><span class="kwd">def</span><span class="pln"> once</span><span class="pun">(</span><span class="pln">body</span><span class="pun">:</span><span class="pln"> DR </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">):</span><span class="pln"> R<br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">EventsToDataflow</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">initial</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">A</span><span class="pun">])</span><span class="pln"><br>&nbsp; </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"><br>&nbsp; </span><span class="kwd">with</span><span class="pln"> </span><span class="typ">ReactiveToDataflow</span><span class="pun">[</span><span class="pln"><br>&nbsp; &nbsp; A</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Unit</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">A</span><span class="pun">],</span><span class="pln"> </span><span class="typ">DataflowEvents</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]]</span><span class="pln"><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SignalToDataflow</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">initial</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">])</span><span class="pln"><br>&nbsp; </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"><br>&nbsp; </span><span class="kwd">with</span><span class="pln"> </span><span class="typ">ReactiveToDataflow</span><span class="pun">[</span><span class="pln"><br>&nbsp; &nbsp; A</span><span class="pun">,</span><span class="pln"> A</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">],</span><span class="pln"> </span><span class="typ">DataflowSignal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]]</span></code></pre></div>
      </div><div class="content" id="slide-42" style="height: 781px; width: 1438px; ">
       <div class="container"><p>そしてReactiveのためのデータフロー言語は次のように定義できるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">DataflowReactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln"> N</span><span class="pun">,</span><span class="pln"> R </span><span class="pun">&lt;:</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln">N</span><span class="pun">]]</span><span class="pln"> <br>&nbsp; &nbsp; </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln"> N</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> emit</span><span class="pun">(</span><span class="pln">m</span><span class="pun">:</span><span class="pln"> M</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> switchTo</span><span class="pun">(</span><span class="pln">r</span><span class="pun">:</span><span class="pln"> R</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> delay</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Unit</span><span class="pln"><br>&nbsp; </span><span class="kwd">def</span><span class="pln"> next</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="pln">r</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">B</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">]):</span><span class="pln"> B<br>&nbsp; </span><span class="kwd">def</span><span class="pln"> nextVal</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="pln">r</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">_</span><span class="pun">,</span><span class="pln"> B</span><span class="pun">]):</span><span class="pln"> B<br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-43" style="height: 781px; width: 1438px; ">
       <div class="container"><ul><li><p>next
</p><ul><li>与えられた r の Message を待つよ
</li></ul></li><li><p>nextVal
</p><ul><li>与えられた r の変更を待つよ
</li></ul></li><li><p>delay
</p><ul><li>現在のデータフローを中断して next の伝播を継続させるよ
</li></ul></li><li><p>emit
</p><ul><li>現在のデータフローに m を発信するよ。そして現在値を反映させるんだ。
</li></ul></li><li><p>switchTo
</p><ul><li>現在のデータフローを与えられた r に切り替えるよ。
</li></ul></li></ul></div>
      </div><div class="content" id="slide-44" style="height: 781px; width: 1438px; ">
       <div class="container"><p>以前に出てきた collect はこんな感じに
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> collect</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="pln">p</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PartialFunction</span><span class="pun">[</span><span class="pln">A</span><span class="pun">,</span><span class="pln"> B</span><span class="pun">])</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="typ">Events</span><span class="pun">.</span><span class="pln">loop</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">val</span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> self next outer<br>&nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">p isDefinedAt x</span><span class="pun">)</span><span class="pln"> self emit p</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">else</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">delay<br>&nbsp; </span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-45" style="height: 781px; width: 1438px; ">
       <div class="container"><p>さらにいくつか便利なコンビネータを提供するよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> hold</span><span class="pun">(</span><span class="pln">init</span><span class="pun">:</span><span class="pln"> A</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="typ">Val</span><span class="pun">(</span><span class="pln">init</span><span class="pun">)</span><span class="pln"> loop </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; self emit </span><span class="pun">(</span><span class="pln">self next </span><span class="lit">this</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span></code></pre><p>　
</p><p>hold は以前の値を保持し続けるコンビネータなんだ
</p></div>
      </div><div class="content" id="slide-46" style="height: 781px; width: 1438px; ">
       <div class="container"><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> switch</span><span class="pun">[</span><span class="pln">A</span><span class="pun">](</span><span class="pln">before</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">],</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; after</span><span class="pun">:</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]):</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; before once </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; self next </span><span class="lit">this</span><span class="pln"><br>&nbsp; &nbsp; self switchTo after<br>&nbsp; </span><span class="pun">}</span></code></pre><p>　
</p><p>switch は切り替えスイッチみたいなもので、最初は before のように振る舞い、自身が on となったら after として振舞うようになるよ
</p></div>
      </div><div class="content" id="slide-47" style="height: 781px; width: 1438px; ">
       <div class="container"><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> take</span><span class="pun">(</span><span class="pln">n</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">.</span><span class="pln">once</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; </span><span class="kwd">var</span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"><br>&nbsp; </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">x </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; self emit </span><span class="pun">(</span><span class="pln">self next outer</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; x </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>take は n回までのイベントを発生させたらその後は沈黙するんだ
</p><p>　
</p><p>同様の仕組みで drop も作れるよ
</p></div>
      </div><div class="content" id="slide-48" style="height: 781px; width: 1438px; ">
       <div class="container"><p>みんな大好き flatten も
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> flattenEvents</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="kwd">implicit</span><span class="pln"> witness</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="pln">B</span><span class="pun">])</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="typ">Events</span><span class="pun">.</span><span class="pln">loop</span><span class="pun">[</span><span class="pln">B</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; self switchTo witness</span><span class="pun">(</span><span class="pln">self next </span><span class="lit">this</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> flatten</span><span class="pun">[</span><span class="pln">B</span><span class="pun">](</span><span class="kwd">implicit</span><span class="pln"> witness</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Signal</span><span class="pun">[</span><span class="pln">B</span><span class="pun">])</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; witness</span><span class="pun">(</span><span class="lit">this</span><span class="pun">.</span><span class="pln">now</span><span class="pun">)</span><span class="pln"> loop </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; self switchTo witness</span><span class="pun">(</span><span class="pln">self next </span><span class="lit">this</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-49" style="height: 781px; width: 1438px; ">
       <div class="container"><p>今 Events と Signal の flatten を別々で定義したけど、一般化して定義もできるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> flatten</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln"> N</span><span class="pun">,</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; R </span><span class="pun">&lt;:</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln">N</span><span class="pun">],</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; DR </span><span class="pun">&lt;:</span><span class="pln"> </span><span class="typ">DataflowReactive</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln">N</span><span class="pun">,</span><span class="pln">R</span><span class="pun">]]</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">(</span><span class="kwd">implicit</span><span class="pln"> c</span><span class="pun">:</span><span class="pln"> A </span><span class="pun">=&gt;</span><span class="pln"> R <br>&nbsp; &nbsp; &nbsp; </span><span class="kwd">with</span><span class="pln"> </span><span class="typ">ReactiveToDataflow</span><span class="pun">[</span><span class="pln">M</span><span class="pun">,</span><span class="pln">N</span><span class="pun">,</span><span class="pln">R</span><span class="pun">,</span><span class="pln">DR</span><span class="pun">]):</span><span class="pln"> R </span><span class="pun">=</span><span class="pln"><br>&nbsp; c</span><span class="pun">(</span><span class="pln">now</span><span class="pun">)</span><span class="pln"> loop </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; &nbsp; self switchTo c</span><span class="pun">(</span><span class="pln">self next </span><span class="lit">this</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-50" style="height: 781px; width: 1438px; ">
       <div class="container"><p>今やマウスドラッグの問題をコンビネータで表現できるようになったよ。
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> moves </span><span class="pun">=</span><span class="pln"> mouseDown map </span><span class="pun">{</span><span class="pln"> md </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; mouseMove map </span><span class="pun">(</span><span class="pln">mm </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Drag</span><span class="pun">(</span><span class="pln">mm</span><span class="pun">))</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> drops </span><span class="pun">=</span><span class="pln"> mouseUp map </span><span class="pun">{</span><span class="pln"> mu </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; </span><span class="typ">Events</span><span class="pun">.</span><span class="typ">Now</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Drop</span><span class="pun">(</span><span class="pln">mu</span><span class="pun">))</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> drags </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">moves merge drops</span><span class="pun">).</span><span class="pln">flatten</span></code></pre></div>
      </div><div class="content" id="slide-51" style="height: 781px; width: 1438px; ">
       <div class="container"><p>再帰的な定義もできるようにしたいね
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> counter </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> loop </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; self emit </span><span class="pun">(</span><span class="pln">self</span><span class="pun">.</span><span class="pln">now </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><p>これは現在の値を評価しようとして現在の値を参照するためおかしなことになっちゃう
</p></div>
      </div><div class="content" id="slide-52" style="height: 781px; width: 1438px; ">
       <div class="container"><p>そこで前の値を意味する previous を導入するよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> counter </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> loop </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; self emit </span><span class="pun">(</span><span class="pln">self</span><span class="pun">.</span><span class="pln">previous </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><p>やったー
</p></div>
      </div><div class="content" id="slide-53" style="height: 781px; width: 1438px; ">
       <div class="container"><p>毎秒その値を更新するフレームレートのSignalなんかもつくれちゃう
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> frameRate </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Val</span><span class="pun">(</span><span class="lit">0</span><span class="pun">)</span><span class="pln"> loop </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> c0 </span><span class="pun">=</span><span class="pln"> counter</span><span class="pun">.</span><span class="pln">now<br>&nbsp; self next </span><span class="typ">Clock</span><span class="pun">.</span><span class="pln">inSeconds</span><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span><span class="pln"><br>&nbsp; self emit </span><span class="pun">(</span><span class="pln">counter</span><span class="pun">.</span><span class="pln">now </span><span class="pun">-</span><span class="pln"> c0</span><span class="pun">)</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-54" style="height: 781px; width: 1438px; ">
       <div class="container"><p>Reactive は Signal や Events だけじゃなく様々な実装クラスを作れるよ
</p></div>
      </div><div class="content" id="slide-55" style="height: 781px; width: 1438px; ">
       <div class="container"><p>たとえば Future
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">trait</span><span class="pln"> </span><span class="typ">Future</span><span class="pun">[+</span><span class="pln">A</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="pln">A</span><span class="pun">,</span><span class="typ">Option</span><span class="pun">[</span><span class="pln">A</span><span class="pun">]]</span></code></pre></div>
      </div><div class="content" id="slide-56" style="height: 781px; width: 1438px; ">
       <div class="container"><p>ドラッグの例に戻ると、リアクティブなPathだって考えることができるよ
</p><p>　
</p><p>以下のような PathDelta があったとして
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PathDelta</span><span class="pln"><br></span><span class="kwd">case</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MoveTo</span><span class="pun">(</span><span class="pln">x</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">PathDelta</span><span class="pln"><br></span><span class="kwd">case</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">LineTo</span><span class="pun">(</span><span class="pln">x</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">PathDelta</span><span class="pln"><br></span><span class="kwd">case</span><span class="pln"> </span><span class="kwd">object</span><span class="pln"> </span><span class="typ">Close</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">PathDelta</span></code></pre></div>
      </div><div class="content" id="slide-57" style="height: 781px; width: 1438px; ">
       <div class="container"><p>こんな実装が考えられる
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">class</span><span class="pln"> </span><span class="typ">RPath</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Reactive</span><span class="pun">[</span><span class="typ">PathDelta</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">]</span></code></pre></div>
      </div><div class="content" id="slide-58" style="height: 781px; width: 1438px; ">
       <div class="container"><p>さらに RPath から Detaflow への変換も
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">class</span><span class="pln"> </span><span class="typ">DataflowRPath</span><span class="pun">(</span><span class="pln">init</span><span class="pun">:</span><span class="pln"> </span><span class="typ">RPath</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">RPath</span><span class="pln"><br>&nbsp; </span><span class="kwd">with</span><span class="pln"> </span><span class="typ">DataflowReactive</span><span class="pun">[</span><span class="typ">PathDelta</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="typ">RPath</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DataflowRPath</span><span class="pun">]</span><span class="pln"><br></span><span class="kwd">implicit</span><span class="pln"> </span><span class="kwd">def</span><span class="pln"> rpath2dataflowrpath</span><span class="pun">(</span><span class="pln">r</span><span class="pun">:</span><span class="pln"> </span><span class="typ">RPath</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">DataflowRPath</span><span class="pun">(</span><span class="pln">r</span><span class="pun">)</span></code></pre></div>
      </div><div class="content" id="slide-59" style="height: 781px; width: 1438px; ">
       <div class="container"><p>すると RPath をこんな風に構築できるようになるよ
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="typ">RPath</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RPath</span><span class="pun">)</span><span class="pln"> once </span><span class="pun">{</span><span class="pln"> self </span><span class="pun">=&gt;</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> down </span><span class="pun">=</span><span class="pln"> self next mouseDown<br>&nbsp; self emit </span><span class="typ">MoveTo</span><span class="pun">(</span><span class="pln">down</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> up </span><span class="pun">=</span><span class="pln"> self loopUntil mouseUp </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">val</span><span class="pln"> m </span><span class="pun">=</span><span class="pln"> self next mouseMove<br>&nbsp; &nbsp; self emit </span><span class="typ">LineTo</span><span class="pun">(</span><span class="pln">m</span><span class="pun">.</span><span class="pln">position</span><span class="pun">)</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; self emit </span><span class="typ">Close</span><span class="pln"><br></span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-60" style="height: 781px; width: 1438px; ">
       <div class="container"><p>もちろん DataflowRPath に メソッド追加する方法だってかまわない
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">def</span><span class="pln"> lineTo</span><span class="pun">(</span><span class="pln">x</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> emit</span><span class="pun">(</span><span class="typ">LineTo</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln">y</span><span class="pun">))</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> close</span><span class="pun">(</span><span class="pln">x</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> emit</span><span class="pun">(</span><span class="typ">Close</span><span class="pun">)</span></code></pre></div>
      </div><div class="content" id="slide-61" style="height: 781px; width: 1438px; ">
       <div class="container"><p>で、このイケてるAPIだけど、実装にあたって注意点があるんだ
</p><p>　
</p><p>それは一貫性の問題
</p></div>
      </div><div class="content" id="slide-62" style="height: 781px; width: 1438px; ">
       <div class="container"><p>例えば次の例を考えてみよう
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="typ">Reactor</span><span class="pun">.</span><span class="pln">once </span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">val</span><span class="pln"> es</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Events</span><span class="pun">[</span><span class="typ">Device</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> connectDevice</span><span class="pun">()</span><span class="pln"><br>&nbsp; </span><span class="pun">(</span><span class="pln">self next es</span><span class="pun">).</span><span class="pln">initialize</span><span class="pun">()</span><span class="pln"><br></span><span class="pun">}</span></code></pre><p>　
</p><p>もし、es が リアクターのnext呼び出しの前にイベントが発行できたとすると、何らかのデバイスの初期化を見逃してしまうことになる！これはヤバい
</p></div>
      </div><div class="content" id="slide-63" style="height: 781px; width: 1438px; ">
       <div class="container"><p>実際の実装では、Push-driven なアプローチによってこの問題を解決してるよ。
</p></div>
      </div><div class="content" id="slide-64" style="height: 781px; width: 1438px; ">
       <div class="container"><p>まずリアクティブの位相的にソートされた依存グラフを構築するんだ。
</p><p>　
</p><p>つまり、全てのソースリアクティブはレベル0として、依存リアクティブは最も高い依存関係のレベルに1を足したものとすした依存グラフということ
</p><p>　
</p></div>
      </div><div class="content" id="slide-65" style="height: 781px; width: 1438px; ">
       <div class="container"><p>こうしてできた依存グラフを元に、次のようにイベントの伝播サイクルを進めるよ
</p><p>　
</p><ol><li>全ての変更または発行されているリアクティブを、リアクティブのレベルを優先度として、Priority Queue に入れる
</li><li>キューに値がある間、最も低いレベルのリアクティブを取得し validate する
</li><li>そのリアクティブは依存している他のリアクティブにメッセージを伝播するかどうか決定する
</li><li>もし伝播するのであれば、そのリアクティブを同様に Priority Queue に追加する
</li></ol></div>
      </div><div class="content" id="slide-66" style="height: 781px; width: 1438px; ">
       <div class="container"><p>この方法はシンプルだけど、リアクティブのレベルが変更されない範囲であれば、十分にデータ不整合を避けられるよ。
</p><p>　
</p><p>ただし、前の依存を削除したり新しい依存を作成したりするためには、どうしてもSignal式やデータフローリアクティブ内で条件分岐などを処理する必要があるんだ。
</p></div>
      </div><div class="content" id="slide-67" style="height: 781px; width: 1438px; ">
       <div class="container"><p>こうした動的な依存のために次の例を考えてみよう
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Var</span><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="com">// level 0</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> y </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Cache</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> f</span><span class="pun">(</span><span class="pln">x</span><span class="pun">())</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// level 1</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> z </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Cache</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> g</span><span class="pun">(</span><span class="pln">y</span><span class="pun">())</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// level 2</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"><br>&nbsp; </span><span class="typ">Signal</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">x</span><span class="pun">()==</span><span class="lit">2</span><span class="pun">)</span><span class="pln"> y</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> z</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// level 2 or 3</span></code></pre></div>
      </div><div class="content" id="slide-68" style="height: 781px; width: 1438px; ">
       <div class="container"><p>result は x に依存していて、位相レベル2か3を持ってるね
</p><p>　
</p><p>シグナルに常に可能性のあるレベルよりも高いレベル割り当てるってアプローチが簡単そうに思えるけど、残念ながらSignal式のレベルを静的に決定することができないんだ
</p><p>　
</p><p>だから実際に現在の値を評価する際に、そのレベルが前に知っていたレベルより大きいとわかったら、Exception を throw してリスケジュールする方法をとってるよ
</p></div>
      </div><div class="content" id="slide-69" style="height: 781px; width: 1438px; ">
       <div class="container"><p>そのため、再計算の可能性があるから、Reactiveの動的な依存関係が参照し終わるまで、負荷の高い計算は取り除いておく事をお勧めしとくよ
</p></div>
      </div><div class="content" id="slide-70" style="height: 781px; width: 1438px; ">
       <div class="container"><p>まぁでも幸いなことに、殆どのコンビネータはレベルを予測するのに十分な情報をもってるし、Signalとかはウォームアップするから安心して
</p></div>
      </div><div class="content" id="slide-71" style="height: 781px; width: 1438px; ">
       <div class="container"><p>相互再帰についても考える必要があるね
</p><p>　
</p><pre><code class="prettyprint lang-scala"><span class="kwd">val</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Var</span><span class="pun">(</span><span class="lit">true</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Signal</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">c</span><span class="pun">())</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> y</span><span class="pun">()</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">val</span><span class="pln"> y </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Signal</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">c</span><span class="pun">())</span><span class="pln"> x</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">}</span></code></pre></div>
      </div><div class="content" id="slide-72" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E7%AA%81%E7%84%B6%E3%81%AE%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97%EF%BC%81">突然の無限ループ！</h1></div>
      </div><div class="content" id="slide-73" style="height: 781px; width: 1438px; ">
       <div class="container"><p>これにはサイクルを検出した際に巻き込まれたリアクティブのみレベルをリセットすることで対応してるよ。
</p></div>
      </div><div class="content" id="slide-74" style="height: 781px; width: 1438px; ">
       <div class="container"><p>それ以外にも実装の問題として副作用の扱いとかメモリリークを避ける工夫とかあるけど、資料作る時間もぅない……
</p><p>　
</p><p>あきらめるのょくなぃって……ぉもって……がんばった……でも……ｺﾞﾒﾝ……まにあわなかった……でもDataflowBaseと限定継続ゎ… ｽﾞｯ友だょ……!
</p></div>
      </div><div class="content" id="slide-75" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h1></div>
      </div><div class="content" id="slide-76" style="height: 781px; width: 1438px; ">
       <div class="container"><p>最初にObserverパターンがイケてないとdisったけど、同じ視点で新しいAPIを評価してみよう
</p></div>
      </div><div class="content" id="slide-77" style="height: 781px; width: 1438px; ">
       <div class="container"><ul><li><p>統一性と抽象度
</p><ul><li>Reactiveインターフェイスが実際にイベントを発行するオブジェクトから独立して、なおかつポリモーフィックに動作するからイケてるよね
</li></ul></li><li><p>カプセル化
</p><ul><li>マウスドラッグの例でも外部状態を露出することなしに実現できたよ
</li></ul></li><li><p>リソースマネジメント
</p><ul><li>ObserverのライフタイムをTraitによって制限できるよ
</li></ul></li><li><p>副作用
</p><ul><li>カプセル化と同様に実行状態を内部に制限できるので副作用も制限できるよ
</li></ul></li></ul></div>
      </div><div class="content" id="slide-78" style="height: 781px; width: 1438px; ">
       <div class="container"><ul><li><p>Composability
</p><ul><li>様々なコンビネータが提供されてるよ
</li></ul></li><li><p>スケーラビリティ
</p><ul><li>Reactive の実装を増やしてく例を見たよね
</li></ul></li><li><p>意味的な距離
</p><ul><li>途中の例でも見たとおり、意味どおりにコード書けるね
</li></ul></li></ul></div>
      </div><div class="content" id="slide-79" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%A4%E3%81%BE%E3%82%8A%E3%82%A4%E3%82%B1%E3%81%A6%E3%82%8B%EF%BC%81">つまりイケてる！</h1></div>
      </div><div class="content" id="slide-80" style="height: 781px; width: 1438px; ">
       <div class="container"><p>実際にこのAPIを実装した Scala.React というライブラリを公開してるよ
</p><p>　
</p><ul><li>http://lamp.epfl.ch/~imaier
</li><li>商用のゲームエンジンで使用されてるすごいやつだよ
</li></ul></div>
      </div><div class="content" id="slide-81" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E5%8F%82%E8%80%83%E8%AB%96%E6%96%87%E3%81%A8%E3%81%8B%E9%96%A2%E9%80%A3Works%E3%81%AF%E5%85%83%E8%AB%96%E6%96%87%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%AD">参考論文とか関連Worksは元論文読んでね</h1></div>
      </div><div class="content" id="slide-82" style="height: 781px; width: 1438px; ">
       <div class="container"><h1 id="%E3%81%8A%E3%81%97%E3%81%BE%E3%81%84">おしまい</h1></div>
      </div>
          </div>
        </div>
        
      
    
</body></html>